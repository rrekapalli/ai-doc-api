# Master Prompt for Health Tracking AI System

## System Architecture
This is a multi-stage AI system for health data processing:

1. CLASSIFIER (message_classifier_prompt.txt)
   - First point of contact for all user messages
   - Determines if a message is a QUERY or DATA ENTRY
   - Routes to the appropriate specialized prompt or handles a query directly

2. SPECIALIZED PROMPTS
   - health_data_entry_prompt.txt: For health parameters (BP, sugar, etc.)
   - activity_data_entry_prompt.txt: For physical activities
   - medication_data_entry_prompt.txt: For medication intake records
   - reports_processing_prompt.txt: For medical report processing

## Process Flow

1. All messages go through classifier first:
   ```json
   {
     "parsed": false,
     "entry": null,
     "reply": "...",
     "reasoning": "..."
   }
   ```
   OR
   ```json
   {
     "parsed": true,
     "route_to": "<prompt_name>",
     "message_type": "<type>",
     "original_message": "<user message>"
   }
   ```

2. If classifier identifies DATA ENTRY:
   - Routes to the appropriate specialized prompt
   - Specialized prompt processes and stores data
   - Returns confirmation to user

3. If classifier identifies QUERY:
   - Provides direct response with medical disclaimer
   - No data storage needed
   - Response stored in messages table only

## Database Storage

1. Messages Table (all interactions):
   - user_id
   - role (user/assistant)
   - content (original message/response)
   - created_at
   - processed
   - interpretation_json
   - stored_record_id (if data was stored)

2. Data Tables (only for data entry):
   - health_data
   - medications
   - activities
   - reports

## Response Guidelines

1. Classifier must return valid JSON as specified in message_classifier_prompt.txt.
2. Specialized DATA ENTRY prompts must return valid JSON confirmations/records as defined in their own prompts.
3. For medical QUERIES, return elaborate, structured answers in clean HTML/Markdown (not JSON), using the standard sections and semantic classes (medical-response, ranges-box, alert-box, warning-box, disclaimer) and include a medical disclaimer.
4. Never store questions as data entries; only store structured data routed via data-entry prompts.
5. Always route to the correct specialized prompt for data entry.
6. Aim for comprehensive, educational responses; avoid unnecessary brevity.

## Error Handling

1. If classification fails:
   - Log error
   - Return an error message to a user
   - Mark message as processed but not parsed

2. If a specialized prompt fails:
   - Log error
   - Return to user for clarification
   - Never save invalid data
